#声明一个自定义realm,这个realm继承了AuthorizingRealm，它和AuthenticatingRealm分别提供了
#对AuthorizationInfo和AuthenticationInfo信息的缓存
MyRealm=com.shiro.realm.MyRealm
#为什么加这个？对应AuthenticationInfo源码里的credentialsMatcher参数，加上能按照自己的规则进行密码校验
MyRealm.credentialsMatcher=$credentialsMatcher
#声明另一个自定义realm，这个realm继承了CachingRealm
#MyCacheRealm=com.shiro.realm.MyCacheRealm
#指定securityManager的realms实现  
securityManager.realms=$MyRealm

#启用缓存，默认false
MyRealm.cachingEnabled=true  
#启用身份验证缓存，即缓存AuthenticationInfo信息，默认false
MyRealm.authenticationCachingEnabled=true  
#缓存AuthenticationInfo信息的缓存名称
MyRealm.authenticationCacheName=authenticationCache 
#启用授权缓存，即缓存AuthorizationInfo信息，默认false 
MyRealm.authorizationCachingEnabled=true  
#缓存AuthorizationInfo信息的缓存名称
MyRealm.authorizationCacheName=authorizationCache 
#cacheManager：缓存管理器，此处使用EhCacheManager，即Ehcache实现
cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager
#ehcache的配置文件
cacheManager.cacheManagerConfigFile=classpath:shiro-ehcache.xml  
securityManager.cacheManager=$cacheManager  

#配置session
sessionManager=org.apache.shiro.session.mgt.DefaultSessionManager  
securityManager.sessionManager=$sessionManager   
sessionManager.globalSessionTimeout=1500000 #设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期
#默认情况下globalSessionTimeout将应用给所有Session。可以单独设置每个Session的timeout属性来为每个Session设置其超时时间

#配置sessionlistener
sessionListener=com.shiro.listener.MySessionListener 
sessionListener2=com.shiro.listener.MySessionListener2
sessionManager.sessionListeners=$sessionListener,$sessionListener2 

# SessionDAO用于会话的CRUD，即DAO（Data Access Object）模式实现
# Shiro提供了使用Ehcache进行会话存储，Ehcache可以配合TerraCotta实现容器无关的分布式集群
# sessionDAO=org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO  
sessionDAO=com.shiro.session.dao.MySessionDAO
sessionDAO.activeSessionsCacheName=shiro-activeSessionCache
sessionManager.sessionDAO=$sessionDAO 

#会话验证调度器，sessionManager默认就是使用ExecutorServiceSessionValidationScheduler，其使用JDK的ScheduledExecutorService进行定期调度并验证会话是否过期
sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
#设置调度时间间隔，单位毫秒，默认就是1小时  
sessionValidationScheduler.interval=3600000  
#设置会话验证调度器进行会话验证时的会话管理器
sessionValidationScheduler.sessionManager=$sessionManager  
#是否开启会话验证器，默认是开启的
sessionManager.sessionValidationSchedulerEnabled=true  
#设置会话验证调度器，默认就是使用ExecutorServiceSessionValidationScheduler
sessionManager.sessionValidationScheduler=$sessionValidationScheduler  

#配置资格验证匹配
#credentialsMatcher=com.shiro.credentials.CustomCredentialsMatcher
credentialsMatcher=com.shiro.credentials.RetryLimitHashedCredentialsMatcher
#加密算法为md5
credentialsMatcher.hashAlgorithmName=md5
#1次md5迭代
credentialsMatcher.hashIterations=1
#false means Base64-encoded
credentialsMatcher.storedCredentialsHexEncoded=true
